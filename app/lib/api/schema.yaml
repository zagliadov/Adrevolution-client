openapi: 3.0.0
paths:
  /company:
    post:
      operationId: CompanyController_createCompany
      summary: Create a new company
      parameters: []
      responses:
        '200':
          description: Successfully created company.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDto'
      tags:
        - Company
    get:
      operationId: CompanyController_getCompany
      summary: Get company details
      parameters: []
      responses:
        '200':
          description: Successfully retrieved company details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDto'
        '404':
          description: Company not found
      tags:
        - Company
  /company/get-users-of-company/{companyId}:
    get:
      operationId: CompanyController_getUsersOfCompanyById
      summary: Get users of company by company id
      parameters:
        - name: companyId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved users of company by company id.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
        '404':
          description: Company or users not found
      tags:
        - Company
  /company/get-users-of-company:
    get:
      operationId: CompanyController_getUsersOfCompany
      summary: Get users of company
      parameters: []
      responses:
        '200':
          description: Successfully retrieved users of company.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
        '404':
          description: Company not found
      tags:
        - Company
  /company/patch-company:
    patch:
      operationId: CompanyController_patchCompany
      summary: Update company details
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchCompanyDto'
      responses:
        '200':
          description: Successfully patched company.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDto'
        '400':
          description: Invalid input
      tags:
        - Company
  /company/add-user-to-company/{companyId}/{userId}:
    patch:
      operationId: CompanyController_addUserToCompany
      summary: Add user to company
      parameters:
        - name: companyId
          required: true
          in: path
          schema:
            type: string
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully added user to company.
      tags:
        - Company
  /company/connect-company-details/{companyId}/{companyDetailsId}:
    patch:
      operationId: CompanyController_connectCompanyDetailsToCompany
      summary: Connect company details to company
      parameters:
        - name: companyId
          required: true
          in: path
          schema:
            type: string
        - name: companyDetailsId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully connected company details to company.
      tags:
        - Company
  /company/get-company-by-id/{companyId}:
    get:
      operationId: CompanyController_getCompanyById
      summary: Get company by ID
      parameters:
        - name: companyId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved company by ID.
        '404':
          description: Company or users not found
      tags:
        - Company
  /company-details:
    post:
      operationId: CompanyDetailsController_createCompanyDetails
      summary: Create new company details
      parameters: []
      responses:
        '200':
          description: Successfully created company details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDetailsDto'
        '409':
          description: Company details already exist for this user
      tags:
        - Company Details
  /company-details/get:
    get:
      operationId: CompanyDetailsController_getCompanyDetails
      summary: Get company details
      parameters: []
      responses:
        '200':
          description: Successfully retrieved company details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDetailsDto'
        '404':
          description: Company details not found
      tags:
        - Company Details
  /company-details/patch:
    patch:
      operationId: CompanyDetailsController_patchCompanyDetails
      summary: Update company details
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchCompanyDetailsDto'
      responses:
        '200':
          description: Successfully updated company details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDetailsDto'
        '400':
          description: Invalid input
      tags:
        - Company Details
  /company-details/industry/{companyId}:
    get:
      operationId: CompanyDetailsController_getIndustryByCompanyId
      summary: Get industry by company ID
      parameters:
        - name: companyId
          required: true
          in: path
          description: ID of the company
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved industry by company ID.
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Company not found
      tags:
        - Company Details
  /business-hours:
    post:
      operationId: BusinessHoursController_createBusinessHours
      summary: Create business hours
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessHoursDto'
      responses:
        '200':
          description: Successfully created business hours
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessHoursDto'
        '400':
          description: Invalid input
      tags:
        - Business hours
    get:
      operationId: BusinessHoursController_getBusinessHours
      summary: Get business hours
      parameters: []
      responses:
        '200':
          description: Successfully retrieved business hours
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessHoursDto'
        '404':
          description: Business hours not found
      tags:
        - Business hours
    patch:
      operationId: BusinessHoursController_patchBusinessHours
      summary: Update business hours
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBusinessHoursDto'
      responses:
        '200':
          description: Successfully updated business hours
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessHoursDto'
        '400':
          description: Invalid input
      tags:
        - Business hours
  /permissions:
    get:
      operationId: PermissionsController_getPermission
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionDto'
  /labour-cost/{userId}:
    patch:
      operationId: LabourCostController_update
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLabourCostDto'
      responses:
        '200':
          description: ''
    get:
      operationId: LabourCostController_findByUserId
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabourCostDto'
    delete:
      operationId: LabourCostController_delete
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
  /communications:
    get:
      operationId: CommunicationsController_getCommunications
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunicationDto'
    patch:
      operationId: CommunicationsController_updateCommunications
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommunicationDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunicationDto'
  /auth/sign-up:
    post:
      operationId: AuthController_signUp
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpBodyDto'
      responses:
        '201':
          description: ''
  /auth/sign-in:
    post:
      operationId: AuthController_signIn
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInBodyDto'
      responses:
        '200':
          description: ''
  /auth/sign-out:
    post:
      operationId: AuthController_signOut
      parameters: []
      responses:
        '200':
          description: ''
  /auth/session:
    get:
      operationId: AuthController_getSessionInfo
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSessionInfoDto'
  /auth/verify/{token}:
    patch:
      operationId: AuthController_verifyUserAndSetPassword
      parameters:
        - name: token
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
  /auth/user/{token}:
    get:
      operationId: AuthController_getUserByToken
      parameters:
        - name: token
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
  /users/find-by-email:
    get:
      operationId: UsersController_findByEmail
      summary: Find user by email
      parameters:
        - name: email
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successfully found user by email.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSecretDto'
        '404':
          description: User not found
      tags:
        - Users
  /users:
    get:
      operationId: UsersController_getUserDetails
      summary: Get user details
      parameters: []
      responses:
        '200':
          description: Successfully retrieved user details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '404':
          description: User not found
      tags:
        - Users
    patch:
      operationId: UsersController_patchUser
      summary: Update user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUserDto'
      responses:
        '200':
          description: Successfully updated user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchUserDto'
      tags:
        - Users
  /users/get-user-by-id/{userId}:
    get:
      operationId: UsersController_getUserById
      summary: Get user by ID
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved user by ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '404':
          description: User not found
      tags:
        - Users
  /users/create-new-user-without-password:
    post:
      operationId: UsersController_createUserWithoutPassword
      summary: Create new user without password
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserWithoutPassword'
      responses:
        '200':
          description: Successfully created new user without password.
      tags:
        - Users
  /users/find-verification-token/{token}:
    get:
      operationId: UsersController_findVerificationToken
      summary: Find verification token
      parameters:
        - name: token
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully found verification token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationTokenDto'
        '404':
          description: Verification token not found
      tags:
        - Users
  /users/update-password/{userId}:
    patch:
      operationId: UsersController_updateUserPassword
      summary: Update user password
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully updated user password.
        '404':
          description: User not found
      tags:
        - Users
  /users/{userId}:
    delete:
      operationId: UsersController_deleteUser
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Users
  /account:
    get:
      operationId: AccountController_getAccount
      summary: Get account details
      parameters: []
      responses:
        '200':
          description: Successfully retrieved account details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
        '404':
          description: Account not found
      tags:
        - Account
    patch:
      operationId: AccountController_patchAccount
      summary: Update account details
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchAccountDto'
      responses:
        '200':
          description: Successfully updated account details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDto'
        '400':
          description: Invalid input
      tags:
        - Account
info:
  title: Transport company
  description: ''
  version: 1.0.0
  contact: {}
tags: []
servers: []
components:
  schemas:
    CompanyDto:
      type: object
      properties:
        id:
          type: string
        companyName:
          type: string
        phoneNumber:
          type: string
        websiteURL:
          type: string
        companyEmail:
          type: string
        street1:
          type: string
        city:
          type: string
        state:
          type: string
        postCode:
          type: string
        businessHoursId:
          type: string
        ownerId:
          type: string
        country:
          type: string
        timezone:
          type: string
        dateFormat:
          type: string
        timeFormat:
          type: string
        firstDayOfWeek:
          type: string
        displayBusinessHours:
          type: boolean
          nullable: true
      required:
        - id
    UserDto:
      type: object
      properties:
        id:
          type: string
          example: clxa2aljj0000ophlkrpc1gki
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        lastLogin:
          type: string
          format: date-time
        streetAddress:
          type: string
        city:
          type: string
        province:
          type: string
        postalCode:
          type: string
        country:
          type: string
        phoneNumber:
          type: string
        companyId:
          type: string
      required:
        - id
    PatchCompanyDto:
      type: object
      properties:
        companyName:
          type: string
          example: NewCompany2
        phoneNumber:
          type: string
          example: '+1234567890'
        websiteURL:
          type: string
          example: https://example.com
        companyEmail:
          type: string
          example: company@example.com
        street1:
          type: string
          example: 123 Main St
        city:
          type: string
          example: Anytown
        state:
          type: string
          example: Anystate
        postCode:
          type: string
          example: 69006D
        country:
          type: string
          example: USA
        timezone:
          type: string
          example: America/New_York
        dateFormat:
          type: string
          example: MM/DD/YYYY
        timeFormat:
          type: string
          example: HH:mm
        firstDayOfWeek:
          type: string
          example: Monday
    CompanyDetailsDto:
      type: object
      properties:
        id:
          type: string
        teamSize:
          type: string
          example: 2-3 people
        estimatedAnnualRevenue:
          type: string
          example: $0 - $50.000
        topPriority:
          type: string
          example: Win more work
        industry:
          type: string
          example: Home Theater
        heardAboutUs:
          type: string
          example: ChatGPT
        displayBusinessHours:
          type: string
          example: false
      required:
        - id
    PatchCompanyDetailsDto:
      type: object
      properties:
        teamSize:
          type: string
          example: 2-3 people
        estimatedAnnualRevenue:
          type: string
          example: $0 - $50.000
        topPriority:
          type: string
          example: Win more work
        industry:
          type: string
          example: Home Theater
        heardAboutUs:
          type: string
          example: ChatGPT
        displayBusinessHours:
          type: string
          example: false
    BusinessHoursDto:
      type: object
      properties:
        monday:
          type: string
          example: '{"start": "09:00", "end": "17:00", "enabled": true}'
        tuesday:
          type: string
          example: '{"start": "09:00", "end": "17:00", "enabled": true}'
        wednesday:
          type: string
          example: '{"start": "09:00", "end": "17:00", "enabled": true}'
        thursday:
          type: string
          example: '{"start": "09:00", "end": "17:00", "enabled": true}'
        friday:
          type: string
          example: '{"start": "09:00", "end": "17:00", "enabled": true}'
        saturday:
          type: string
          example: '{"start": "09:00", "end": "17:00", "enabled": false}'
        sunday:
          type: string
          example: '{"start": "09:00", "end": "17:00", "enabled": false}'
      required:
        - monday
        - tuesday
        - wednesday
        - thursday
        - friday
        - saturday
        - sunday
    PatchBusinessHoursDto:
      type: object
      properties:
        monday:
          type: string
          example: '{"start": "09:00", "end": "17:00", "enabled": true}'
        tuesday:
          type: string
          example: '{"start": "09:00", "end": "17:00", "enabled": true}'
        wednesday:
          type: string
          example: '{"start": "09:00", "end": "17:00", "enabled": true}'
        thursday:
          type: string
          example: '{"start": "09:00", "end": "17:00", "enabled": true}'
        friday:
          type: string
          example: '{"start": "09:00", "end": "17:00", "enabled": true}'
        saturday:
          type: string
          example: '{"start": "09:00", "end": "17:00", "enabled": false}'
        sunday:
          type: string
          example: '{"start": "09:00", "end": "17:00", "enabled": false}'
    PermissionDto:
      type: object
      properties:
        isOwner:
          type: boolean
        isAdmin:
          type: boolean
        level:
          type: string
      required:
        - isOwner
        - isAdmin
        - level
    UpdateLabourCostDto:
      type: object
      properties: {}
    LabourCostDto:
      type: object
      properties: {}
    CommunicationDto:
      type: object
      properties: {}
    UpdateCommunicationDto:
      type: object
      properties: {}
    SignUpBodyDto:
      type: object
      properties:
        email:
          type: string
          example: test@gmail.com
        password:
          type: string
          example: test
      required:
        - email
        - password
    SignInBodyDto:
      type: object
      properties:
        email:
          type: string
          example: test@gmail.com
        password:
          type: string
          example: test
      required:
        - email
        - password
    GetSessionInfoDto:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        iat:
          type: number
        exp:
          type: number
      required:
        - id
        - email
        - iat
        - exp
    UserSecretDto:
      type: object
      properties:
        id:
          type: string
          example: clxa2aljj0000ophlkrpc1gki
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        lastLogin:
          type: string
          format: date-time
        streetAddress:
          type: string
        city:
          type: string
        province:
          type: string
        postalCode:
          type: string
        country:
          type: string
        phoneNumber:
          type: string
        hash:
          type: string
        salt:
          type: string
      required:
        - id
    UserWithoutPassword:
      type: object
      properties:
        id:
          type: string
          example: clxa2aljj0000ophlkrpc1gki
        email:
          type: string
          example: a.a.t.a.trade@gmail.com
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        streetAddress:
          type: string
          example: 123 Main St
        city:
          type: string
          example: JohnCity
        province:
          type: string
          example: JohnProvince
        postalCode:
          type: string
          example: 67008T
        country:
          type: string
          example: USA
        phoneNumber:
          type: string
          example: '+1234567890'
        companyId:
          type: string
          example: clxean62l000487898922wqk5
        labourCost:
          type: number
          example: 20
        costUnit:
          type: string
          enum:
            - PER_HOUR
            - PER_MONTH
          example: PER_HOUR
        surveys:
          type: boolean
          example: true
        isAdmin:
          type: boolean
          example: false
        permissionLevel:
          type: string
          enum:
            - COMPANY_OWNER
            - LIMITED_WORKER
            - WORKER
            - DISPATCHER
            - MANAGER
            - CUSTOM
          example: WORKER
        inviterFirstName:
          type: string
          example: Daniil
        inviterLastName:
          type: string
          example: Zahliadov
      required:
        - id
        - email
        - firstName
        - lastName
    PatchUserDto:
      type: object
      properties:
        firstName:
          type: string
          example: Daniil
        lastName:
          type: string
          example: Zahliadov
        streetAddress:
          type: string
          example: 123 Main St
        city:
          type: string
          example: New York
        province:
          type: string
          example: New Province
        postalCode:
          type: string
          example: 69904E
        country:
          type: string
          example: USA
        phoneNumber:
          type: string
          example: '+1234567890'
    VerificationTokenDto:
      type: object
      properties:
        id:
          type: string
          example: clxa2aljj0000ophlkrpc1gki
        token:
          type: string
          example: verification-token
        userId:
          type: string
          example: clxa2aljj0000ophlkrpc1gki
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - token
        - userId
        - createdAt
    AccountDto:
      type: object
      properties:
        id:
          type: string
        ownerId:
          type: string
        isBlockingEnabled:
          type: boolean
      required:
        - id
        - ownerId
        - isBlockingEnabled
    PatchAccountDto:
      type: object
      properties:
        isBlockingEnabled:
          type: boolean
      required:
        - isBlockingEnabled
