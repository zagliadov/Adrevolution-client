openapi: 3.0.0
paths:
  /company:
    get:
      operationId: CompanyController_getCompany
      summary: Get company details
      parameters: []
      responses:
        '200':
          description: Successfully retrieved company details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDto'
        '404':
          description: Company not found
      tags:
        - Company
    post:
      operationId: CompanyController_createCompany
      summary: Create a new company
      parameters: []
      responses:
        '200':
          description: Successfully created company.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDto'
      tags:
        - Company
    patch:
      operationId: CompanyController_patchCompany
      summary: Update company details
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchCompanyDto'
      responses:
        '200':
          description: Successfully patched company.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDto'
        '400':
          description: Invalid input
      tags:
        - Company
  /company/{companyId}/users:
    get:
      operationId: CompanyController_getUsersOfCompanyById
      summary: Get users of company by company id
      parameters:
        - name: companyId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved users of company by company id.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
        '404':
          description: Company or users not found
      tags:
        - Company
  /company/users:
    get:
      operationId: CompanyController_getUsersOfCompany
      summary: Get users of company
      parameters: []
      responses:
        '200':
          description: Successfully retrieved users of company.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
        '404':
          description: Company not found
      tags:
        - Company
  /company/{companyId}/{userId}:
    patch:
      operationId: CompanyController_addUserToCompany
      summary: Add user to company
      parameters:
        - name: companyId
          required: true
          in: path
          schema:
            type: string
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully added user to company.
      tags:
        - Company
  /company/{companyId}:
    get:
      operationId: CompanyController_getCompanyById
      summary: Get company by ID
      parameters:
        - name: companyId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved company by ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDto'
        '404':
          description: Company not found
      tags:
        - Company
  /company/resources:
    get:
      operationId: CompanyController_getCompanyResources
      summary: Get company resources for current user
      parameters: []
      responses:
        '200':
          description: Successfully retrieved company resources.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceDto'
        '404':
          description: Resources not found
      tags:
        - Company
  /company/orders:
    get:
      operationId: CompanyController_getCompanyOrders
      summary: Get company orders for current user
      parameters: []
      responses:
        '200':
          description: Successfully retrieved company orders.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderDto'
        '404':
          description: Orders not found
      tags:
        - Company
  /business-hours:
    post:
      operationId: BusinessHoursController_createBusinessHours
      summary: Create business hours
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessHoursDto'
      responses:
        '200':
          description: Successfully created business hours
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessHoursDto'
        '400':
          description: Invalid input
      tags:
        - Business hours
    get:
      operationId: BusinessHoursController_getBusinessHours
      summary: Get business hours
      parameters: []
      responses:
        '200':
          description: Successfully retrieved business hours
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessHoursDto'
        '404':
          description: Business hours not found
      tags:
        - Business hours
    patch:
      operationId: BusinessHoursController_patchBusinessHours
      summary: Update business hours
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBusinessHoursDto'
      responses:
        '200':
          description: Successfully updated business hours
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessHoursDto'
        '400':
          description: Invalid input
      tags:
        - Business hours
  /business-hours/{userId}:
    get:
      operationId: BusinessHoursController_getBusinessHoursByUserId
      summary: Get business hours by user ID
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved business hours
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessHoursDto'
        '404':
          description: Business hours not found
      tags:
        - Business hours
    patch:
      operationId: BusinessHoursController_patchBusinessHoursById
      summary: Patch business hours by user ID
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBusinessHoursDto'
      responses:
        '200':
          description: Successfully updated business hours
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessHoursDto'
        '400':
          description: Invalid input
      tags:
        - Business hours
  /permissions:
    post:
      operationId: PermissionsController_create
      summary: Create a new permission
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePermissionDto'
      responses:
        '200':
          description: Successfully created permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionDto'
        '400':
          description: Invalid input data
      tags:
        - Permission
  /permissions/{id}:
    get:
      operationId: PermissionsController_getPermission
      summary: Get a permission by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionDto'
        '404':
          description: Permission not found
      tags:
        - Permission
    patch:
      operationId: PermissionsController_update
      summary: Update a permission by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePermissionDto'
      responses:
        '200':
          description: Successfully updated permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionDto'
        '400':
          description: Invalid input
        '404':
          description: Permission not found
      tags:
        - Permission
    delete:
      operationId: PermissionsController_delete
      summary: Delete a permission by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted permission.
        '404':
          description: Permission not found
      tags:
        - Permission
  /payment-type:
    post:
      operationId: PaymentTypeController_create
      summary: Create a new payment type
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentTypeDto'
      responses:
        '201':
          description: Successfully created payment type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTypeDto'
        '400':
          description: Invalid input data
      tags:
        - Payment type
  /payment-type/{userId}:
    patch:
      operationId: PaymentTypeController_update
      summary: Update a payment type by user ID
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePaymentTypeDto'
      responses:
        '200':
          description: Successfully updated payment type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTypeDto'
        '400':
          description: Invalid input data
        '404':
          description: Payment Type not found
      tags:
        - Payment type
    get:
      operationId: PaymentTypeController_findByUserId
      summary: Get a payment type by user ID
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved payment type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTypeDto'
        '404':
          description: Payment Type not found
      tags:
        - Payment type
    delete:
      operationId: PaymentTypeController_delete
      summary: Delete a payment type by user ID
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted payment type.
        '404':
          description: Payment Type not found
      tags:
        - Payment type
  /user-notification-settings:
    post:
      operationId: UserNotificationSettingsController_createUserNotificationSettings
      summary: Create user notifications
      parameters: []
      responses:
        '200':
          description: Successfully created user notifications.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotificationSettingsService'
      tags:
        - User notification settings
    get:
      operationId: UserNotificationSettingsController_getUserNotificationSettings
      summary: Get user notifications
      parameters: []
      responses:
        '200':
          description: Successfully retrieved user notifications.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotificationSettingsDto'
      tags:
        - User notification settings
    patch:
      operationId: UserNotificationSettingsController_updateUserNotificationSettings
      summary: Update user notifications
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserNotificationSettingsDto'
      responses:
        '200':
          description: Successfully updated user notifications.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotificationSettingsDto'
      tags:
        - User notification settings
  /user-notification-settings/user/{userId}:
    get:
      operationId: UserNotificationSettingsController_getUserNotificationSettingsByUserId
      summary: Get notifications by user ID
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved notifications by user ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotificationSettingsDto'
        '404':
          description: User not found
      tags:
        - User notification settings
    patch:
      operationId: >-
        UserNotificationSettingsController_updateUserNotificationSettingsByUserId
      summary: Update notifications by user ID
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserNotificationSettingsDto'
      responses:
        '200':
          description: Successfully updated notifications by user ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotificationSettingsDto'
        '404':
          description: User not found
      tags:
        - User notification settings
  /resources:
    post:
      operationId: ResourcesController_createResource
      summary: Create a new resource
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResourceDto'
      responses:
        '200':
          description: Successfully created resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResourceDto'
      tags:
        - Resources
  /resources/{companyId}:
    get:
      operationId: ResourcesController_findAllCompanyResources
      summary: Get all resources by company id
      parameters:
        - name: companyId
          required: true
          in: path
          description: The ID of the company
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved all resources.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceDto'
      tags:
        - Resources
  /resources/{id}:
    get:
      operationId: ResourcesController_findOneResource
      summary: Get a resource by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResourceDto'
        '404':
          description: Resource not found
      tags:
        - Resources
    patch:
      operationId: ResourcesController_updateResource
      summary: Update a resource by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateResourceDto'
      responses:
        '200':
          description: Successfully updated resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResourceDto'
        '400':
          description: Invalid input
      tags:
        - Resources
    delete:
      operationId: ResourcesController_removeResource
      summary: Delete a resource by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted resource.
        '404':
          description: Resource not found
      tags:
        - Resources
  /resources/default/{companyId}:
    post:
      operationId: ResourcesController_createDefaultResourcesForCompany
      summary: Create default resources for a company
      parameters:
        - name: companyId
          required: true
          in: path
          schema:
            type: string
        - name: industry
          required: true
          in: query
          schema:
            enum:
              - Freight Transport Company
              - Passenger Transport Company
              - Logistics and Supply Chain Company
              - Courier and Delivery Service
              - Moving and Relocation Company
              - Maritime Shipping Company
              - Air Cargo Company
              - Rail Transport Company
              - Intermodal Transport Company
              - Public Transport Company
            type: string
      responses:
        '200':
          description: Successfully created default resources for company.
      tags:
        - Resources
  /orders:
    post:
      operationId: OrderController_createOrder
      summary: Create a new order
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderDto'
      responses:
        '200':
          description: Successfully created order.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDto'
      tags:
        - Order
  /orders/{id}:
    get:
      operationId: OrderController_findOneOrder
      summary: Get an order by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved order.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDto'
        '404':
          description: Order not found
      tags:
        - Order
    patch:
      operationId: OrderController_updateOrder
      summary: Update an order by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderDto'
      responses:
        '200':
          description: Successfully updated order.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDto'
        '400':
          description: Invalid input
      tags:
        - Order
    delete:
      operationId: OrderController_removeOrder
      summary: Delete an order by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted order.
        '404':
          description: Order not found
      tags:
        - Order
  /orders/{companyId}:
    get:
      operationId: OrderController_findAllCompanyOrders
      summary: Get all orders for a company
      parameters:
        - name: companyId
          required: true
          in: path
          description: The ID of the company
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved all orders for a company.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderDto'
      tags:
        - Order
  /auth/sign-up:
    post:
      operationId: AuthController_signUp
      summary: Sign up a new user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpBodyDto'
      responses:
        '201':
          description: Successfully signed up a new user.
      tags:
        - Auth
  /auth/sign-in:
    post:
      operationId: AuthController_signIn
      summary: Sign in an existing user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInBodyDto'
      responses:
        '200':
          description: Successfully signed in the user.
      tags:
        - Auth
  /auth/sign-out:
    post:
      operationId: AuthController_signOut
      summary: Sign out the current user
      parameters: []
      responses:
        '200':
          description: Successfully signed out the user.
      tags:
        - Auth
  /auth/session:
    get:
      operationId: AuthController_getSessionInfo
      summary: Get session information
      parameters: []
      responses:
        '200':
          description: Successfully retrieved session information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSessionInfoDto'
      tags:
        - Auth
  /auth/verify/{token}:
    patch:
      operationId: AuthController_verifyUserAndSetPassword
      summary: Verify user and set password
      parameters:
        - name: token
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully verified user and set password.
      tags:
        - Auth
  /auth/user/{token}:
    get:
      operationId: AuthController_getUserByToken
      summary: Get user by verification token
      parameters:
        - name: token
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved user by token.
      tags:
        - Auth
  /users/{email}:
    get:
      operationId: UsersController_findByEmail
      summary: Find user by email
      parameters:
        - name: email
          required: true
          in: path
          description: The email of the user
          schema:
            type: string
      responses:
        '200':
          description: Successfully found user by email.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSecretDto'
        '404':
          description: User not found
      tags:
        - Users
  /users:
    get:
      operationId: UsersController_getUserDetails
      summary: Get user details
      parameters: []
      responses:
        '200':
          description: Successfully retrieved user details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '404':
          description: User not found
      tags:
        - Users
    patch:
      operationId: UsersController_patchUser
      summary: Update user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUserDto'
      responses:
        '200':
          description: Successfully updated user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
      tags:
        - Users
  /users/{userId}:
    get:
      operationId: UsersController_getUserById
      summary: Get user by ID
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved user by ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '404':
          description: User not found
      tags:
        - Users
    delete:
      operationId: UsersController_deleteUser
      summary: Delete user by ID
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted user.
        '404':
          description: User not found
      tags:
        - Users
  /users/without-password:
    post:
      operationId: UsersController_createUserWithoutPassword
      summary: Create new user without password
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserWithoutPassword'
      responses:
        '200':
          description: Successfully created new user without password.
      tags:
        - Users
  /users/verification/{token}:
    get:
      operationId: UsersController_findVerificationToken
      summary: Find verification token
      parameters:
        - name: token
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully found verification token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationTokenDto'
        '404':
          description: Verification token not found
      tags:
        - Users
  /users/password/{userId}:
    patch:
      operationId: UsersController_updateUserPassword
      summary: Update user password
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully updated user password.
        '404':
          description: User not found
      tags:
        - Users
  /user-position:
    get:
      operationId: UserPositionController_getUserPosition
      summary: Get user position
      parameters: []
      responses:
        '200':
          description: Successfully retrieved user position.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PositionDto'
        '404':
          description: User position not found
      tags:
        - User Positions
    post:
      operationId: UserPositionController_create
      summary: Create a new position
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePositionDto'
      responses:
        '201':
          description: Position created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PositionDto'
        '400':
          description: Invalid input data
      tags:
        - User Positions
  /user-position/{id}:
    patch:
      operationId: UserPositionController_update
      summary: Update a position by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePositionDto'
      responses:
        '200':
          description: Position updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PositionDto'
        '404':
          description: Position not found
      tags:
        - User Positions
    get:
      operationId: UserPositionController_getPositionByPositionId
      summary: Get position by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved position.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PositionDto'
        '404':
          description: Position not found
      tags:
        - User Positions
    delete:
      operationId: UserPositionController_delete
      summary: Delete a position by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Position deleted successfully
        '404':
          description: Position not found
      tags:
        - User Positions
  /user-position/assign:
    post:
      operationId: UserPositionController_assignUserToPosition
      summary: Assign a user to a position
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignUserToPositionDto'
      responses:
        '200':
          description: User assigned to position successfully
        '404':
          description: User or position not found
      tags:
        - User Positions
  /order-companies:
    post:
      operationId: OrderCompaniesController_createOrderCompany
      summary: Create a new order company
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderCompaniesDto'
      responses:
        '200':
          description: Successfully created order company.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCompaniesDto'
      tags:
        - Order Companies
    get:
      operationId: OrderCompaniesController_findOrderCompanies
      summary: Get all companies for an order
      parameters:
        - name: orderId
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved all companies for an order.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderCompaniesDto'
      tags:
        - Order Companies
  /order-companies/{id}:
    get:
      operationId: OrderCompaniesController_findOneOrderCompany
      summary: Get an order company by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved order company.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCompaniesDto'
        '404':
          description: Order company not found
      tags:
        - Order Companies
    patch:
      operationId: OrderCompaniesController_updateOrderCompany
      summary: Update an order company by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderCompaniesDto'
      responses:
        '200':
          description: Successfully updated order company.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCompaniesDto'
        '400':
          description: Invalid input
      tags:
        - Order Companies
    delete:
      operationId: OrderCompaniesController_removeOrderCompany
      summary: Delete an order company by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted order company.
        '404':
          description: Order company not found
      tags:
        - Order Companies
  /order-resources:
    post:
      operationId: OrderResourcesController_createOrderResource
      summary: Create a new order resource
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderResourcesDto'
      responses:
        '200':
          description: Successfully created order resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResourcesDto'
      tags:
        - Order Resources
    get:
      operationId: OrderResourcesController_findOrderResources
      summary: Get all resources for an order
      parameters:
        - name: orderId
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved all resources for an order.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderResourcesDto'
      tags:
        - Order Resources
  /order-resources/{id}:
    get:
      operationId: OrderResourcesController_findOneOrderResource
      summary: Get an order resource by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved order resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResourcesDto'
        '404':
          description: Order resource not found
      tags:
        - Order Resources
    patch:
      operationId: OrderResourcesController_updateOrderResource
      summary: Update an order resource by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderResourcesDto'
      responses:
        '200':
          description: Successfully updated order resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResourcesDto'
        '400':
          description: Invalid input
      tags:
        - Order Resources
    delete:
      operationId: OrderResourcesController_removeOrderResource
      summary: Delete an order resource by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted order resource.
        '404':
          description: Order resource not found
      tags:
        - Order Resources
info:
  title: Adrevolution
  description: ''
  version: 1.0.0
  contact: {}
tags: []
servers: []
components:
  schemas:
    CompanyDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        phoneNumber:
          type: string
        websiteURL:
          type: string
        email:
          type: string
        street1:
          type: string
        street2:
          type: string
        city:
          type: string
        state:
          type: string
        postCode:
          type: string
        businessHoursId:
          type: string
        ownerId:
          type: string
        country:
          type: string
        timezone:
          type: string
        dateFormat:
          type: string
        timeFormat:
          type: string
        firstDayOfWeek:
          type: string
        teamSize:
          type: string
          example: 2-3 people
        estimatedAnnualRevenue:
          type: string
          example: $0 - $50.000
        topPriority:
          type: string
          example: Win more work
        industry:
          type: string
          example: Home Theater
        heardAboutUs:
          type: string
          example: ChatGPT
        displayBusinessHours:
          type: boolean
          example: false
      required:
        - id
    UserDto:
      type: object
      properties:
        id:
          type: string
          example: clxa2aljj0000ophlkrpc1gki
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        lastLogin:
          type: string
          format: date-time
        streetAddress:
          type: string
        city:
          type: string
        province:
          type: string
        postalCode:
          type: string
        country:
          type: string
        phoneNumber:
          type: string
        companyId:
          type: string
      required:
        - id
    PatchCompanyDto:
      type: object
      properties:
        name:
          type: string
          example: NewCompany2
        phoneNumber:
          type: string
          example: '+1234567890'
        websiteURL:
          type: string
          example: https://example.com
        email:
          type: string
          example: company@example.com
        street1:
          type: string
          example: 123 Main St
        street2:
          type: string
          example: Route 66
        city:
          type: string
          example: Anytown
        state:
          type: string
          example: Anystate
        postCode:
          type: string
          example: 69006D
        country:
          type: string
          example: USA
        timezone:
          type: string
          example: America/New_York
        dateFormat:
          type: string
          example: MM/DD/YYYY
        timeFormat:
          type: string
          example: HH:mm
        firstDayOfWeek:
          type: string
          example: Monday
        teamSize:
          type: string
          example: 2-3 people
        estimatedAnnualRevenue:
          type: string
          example: $0 - $50.000
        topPriority:
          type: string
          example: Win more work
        industry:
          type: string
          example: Home Theater
        heardAboutUs:
          type: string
          example: ChatGPT
        displayBusinessHours:
          type: boolean
          example: false
    ResourceDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          enum:
            - TRUCK
            - CAR
            - BICYCLE
            - COMPUTER
            - VACUUM_MACHINE
            - SHIP
            - AIRPLANE
            - TRAIN
            - VAN
            - BUS
        userId:
          type: string
          nullable: true
        companyId:
          type: string
        additionalProperties:
          type: object
      required:
        - id
        - name
        - type
        - companyId
    OrderDto:
      type: object
      properties:
        id:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
            - PENDING
            - IN_PROGRESS
            - COMPLETED
            - CANCELLED
        startAt:
          type: string
          format: date-time
        endAt:
          type: string
          format: date-time
        meta:
          type: string
      required:
        - id
        - description
        - status
        - startAt
        - endAt
        - meta
    BusinessHoursDto:
      type: object
      properties:
        monday:
          type: string
          example: '{"start": "09:00", "end": "17:00", "enabled": true}'
        tuesday:
          type: string
          example: '{"start": "09:00", "end": "17:00", "enabled": true}'
        wednesday:
          type: string
          example: '{"start": "09:00", "end": "17:00", "enabled": true}'
        thursday:
          type: string
          example: '{"start": "09:00", "end": "17:00", "enabled": true}'
        friday:
          type: string
          example: '{"start": "09:00", "end": "17:00", "enabled": true}'
        saturday:
          type: string
          example: '{"start": "09:00", "end": "17:00", "enabled": false}'
        sunday:
          type: string
          example: '{"start": "09:00", "end": "17:00", "enabled": false}'
      required:
        - monday
        - tuesday
        - wednesday
        - thursday
        - friday
        - saturday
        - sunday
    PatchBusinessHoursDto:
      type: object
      properties:
        monday:
          type: string
          example: '{"start": "09:00", "end": "17:00", "enabled": true}'
        tuesday:
          type: string
          example: '{"start": "09:00", "end": "17:00", "enabled": true}'
        wednesday:
          type: string
          example: '{"start": "09:00", "end": "17:00", "enabled": true}'
        thursday:
          type: string
          example: '{"start": "09:00", "end": "17:00", "enabled": true}'
        friday:
          type: string
          example: '{"start": "09:00", "end": "17:00", "enabled": true}'
        saturday:
          type: string
          example: '{"start": "09:00", "end": "17:00", "enabled": false}'
        sunday:
          type: string
          example: '{"start": "09:00", "end": "17:00", "enabled": false}'
    CreatePermissionDto:
      type: object
      properties:
        userPositionId:
          type: string
        isAdmin:
          type: boolean
      required:
        - userPositionId
        - isAdmin
    PermissionDto:
      type: object
      properties:
        id:
          type: string
        userPositionId:
          type: string
        isAdmin:
          type: boolean
      required:
        - id
        - userPositionId
        - isAdmin
    UpdatePermissionDto:
      type: object
      properties:
        isAdmin:
          type: boolean
      required:
        - isAdmin
    CreatePaymentTypeDto:
      type: object
      properties:
        labourCost:
          type: string
          example: '25.5'
        costUnit:
          type: string
          enum:
            - PER_HOUR
            - PER_MONTH
          example: PER_HOUR
        userId:
          type: string
          example: cuid1234567890
      required:
        - userId
    PaymentTypeDto:
      type: object
      properties:
        id:
          type: string
          example: cuid1234567890
        labourCost:
          type: string
          example: '30.0'
        costUnit:
          type: string
          enum:
            - PER_HOUR
            - PER_MONTH
          example: PER_HOUR
        userId:
          type: string
          example: cuid1234567890
      required:
        - id
        - costUnit
        - userId
    UpdatePaymentTypeDto:
      type: object
      properties:
        labourCost:
          type: string
          example: '30.0'
        costUnit:
          type: string
          enum:
            - PER_HOUR
            - PER_MONTH
          example: PER_MONTH
    UserNotificationSettingsService:
      type: object
      properties: {}
    UserNotificationSettingsDto:
      type: object
      properties:
        id:
          type: string
          example: cuid1234567890
        userId:
          type: string
          example: cuid1234567890
        surveys:
          type: boolean
          example: true
        errorMessages:
          type: boolean
          example: true
      required:
        - id
        - userId
        - surveys
        - errorMessages
    UpdateUserNotificationSettingsDto:
      type: object
      properties:
        surveys:
          type: boolean
          example: true
        errorMessages:
          type: boolean
          example: true
      required:
        - surveys
        - errorMessages
    CreateResourceDto:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          enum:
            - TRUCK
            - CAR
            - BICYCLE
            - COMPUTER
            - VACUUM_MACHINE
            - SHIP
            - AIRPLANE
            - TRAIN
            - VAN
            - BUS
        userId:
          type: string
          nullable: true
        companyId:
          type: string
        additionalProperties:
          type: object
      required:
        - name
        - companyId
    UpdateResourceDto:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          enum:
            - TRUCK
            - CAR
            - BICYCLE
            - COMPUTER
            - VACUUM_MACHINE
            - SHIP
            - AIRPLANE
            - TRAIN
            - VAN
            - BUS
        userId:
          type: string
          nullable: true
        companyId:
          type: string
        additionalProperties:
          type: object
    CreateOrderDto:
      type: object
      properties:
        description:
          type: string
        status:
          type: string
          enum:
            - PENDING
            - IN_PROGRESS
            - COMPLETED
            - CANCELLED
        startAt:
          type: string
          format: date-time
        endAt:
          type: string
          format: date-time
        meta:
          type: string
      required:
        - description
        - startAt
        - endAt
        - meta
    UpdateOrderDto:
      type: object
      properties:
        description:
          type: string
        status:
          type: string
          enum:
            - PENDING
            - IN_PROGRESS
            - COMPLETED
            - CANCELLED
        startAt:
          type: string
          format: date-time
        endAt:
          type: string
          format: date-time
        meta:
          type: string
    SignUpBodyDto:
      type: object
      properties:
        email:
          type: string
          example: test@gmail.com
        password:
          type: string
          example: test
      required:
        - email
        - password
    SignInBodyDto:
      type: object
      properties:
        email:
          type: string
          example: test@gmail.com
        password:
          type: string
          example: test
      required:
        - email
        - password
    GetSessionInfoDto:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        iat:
          type: number
        exp:
          type: number
      required:
        - id
        - email
        - iat
        - exp
    UserSecretDto:
      type: object
      properties:
        id:
          type: string
          example: clxa2aljj0000ophlkrpc1gki
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        lastLogin:
          type: string
          format: date-time
        streetAddress:
          type: string
        city:
          type: string
        province:
          type: string
        postalCode:
          type: string
        country:
          type: string
        phoneNumber:
          type: string
        hash:
          type: string
        salt:
          type: string
      required:
        - id
    UserWithoutPassword:
      type: object
      properties:
        id:
          type: string
          example: clxa2aljj0000ophlkrpc1gki
        email:
          type: string
          example: a.a.t.a.trade@gmail.com
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        streetAddress:
          type: string
          example: 123 Main St
        city:
          type: string
          example: JohnCity
        province:
          type: string
          example: JohnProvince
        postalCode:
          type: string
          example: 67008T
        country:
          type: string
          example: USA
        phoneNumber:
          type: string
          example: '+1234567890'
        companyId:
          type: string
          example: clxean62l000487898922wqk5
        labourCost:
          type: string
          example: '20'
        costUnit:
          type: string
          enum:
            - PER_HOUR
            - PER_MONTH
          example: PER_HOUR
        surveys:
          type: boolean
          example: true
        isAdmin:
          type: boolean
          example: false
        positionType:
          type: string
          enum:
            - COMPANY_OWNER
            - LIMITED_WORKER
            - WORKER
            - DISPATCHER
            - MANAGER
            - CUSTOM
          example: WORKER
        inviterFirstName:
          type: string
          example: Daniil
        inviterLastName:
          type: string
          example: Zahliadov
      required:
        - id
        - email
        - firstName
        - lastName
    PatchUserDto:
      type: object
      properties:
        firstName:
          type: string
          example: Daniil
        lastName:
          type: string
          example: Zahliadov
        email:
          type: string
        streetAddress:
          type: string
          example: 123 Main St
        city:
          type: string
          example: New York
        province:
          type: string
          example: New Province
        postalCode:
          type: string
          example: 69904E
        country:
          type: string
          example: USA
        phoneNumber:
          type: string
          example: '+1234567890'
    VerificationTokenDto:
      type: object
      properties:
        id:
          type: string
          example: clxa2aljj0000ophlkrpc1gki
        token:
          type: string
          example: verification-token
        userId:
          type: string
          example: clxa2aljj0000ophlkrpc1gki
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - token
        - userId
        - createdAt
    PositionDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          enum:
            - COMPANY_OWNER
            - LIMITED_WORKER
            - WORKER
            - DISPATCHER
            - MANAGER
            - CUSTOM
      required:
        - id
        - name
    CreatePositionDto:
      type: object
      properties:
        name:
          type: string
          enum:
            - COMPANY_OWNER
            - LIMITED_WORKER
            - WORKER
            - DISPATCHER
            - MANAGER
            - CUSTOM
      required:
        - name
    UpdatePositionDto:
      type: object
      properties:
        name:
          type: string
          enum:
            - COMPANY_OWNER
            - LIMITED_WORKER
            - WORKER
            - DISPATCHER
            - MANAGER
            - CUSTOM
      required:
        - name
    AssignUserToPositionDto:
      type: object
      properties:
        userId:
          type: string
        positionId:
          type: string
      required:
        - userId
        - positionId
    CreateOrderCompaniesDto:
      type: object
      properties:
        orderId:
          type: string
          example: cuid2
          description: The unique identifier of the order
        contractorCompanyId:
          type: string
          example: cuid3
          description: The unique identifier of the contractor company
        subcontractorCompanyId:
          type: string
          example: cuid4
          description: The unique identifier of the subcontractor company, if any
      required:
        - orderId
        - contractorCompanyId
    OrderCompaniesDto:
      type: object
      properties:
        id:
          type: string
          example: cuid1
          description: The unique identifier of the order company
        orderId:
          type: string
          example: cuid2
          description: The unique identifier of the order
        contractorCompanyId:
          type: string
          example: cuid3
          description: The unique identifier of the contractor company
        subcontractorCompanyId:
          type: string
          example: cuid4
          description: The unique identifier of the subcontractor company, if any
      required:
        - id
        - orderId
        - contractorCompanyId
    UpdateOrderCompaniesDto:
      type: object
      properties:
        orderId:
          type: string
          example: cuid2
          description: The unique identifier of the order
        contractorCompanyId:
          type: string
          example: cuid3
          description: The unique identifier of the contractor company
        subcontractorCompanyId:
          type: string
          example: cuid4
          description: The unique identifier of the subcontractor company, if any
    CreateOrderResourcesDto:
      type: object
      properties:
        orderId:
          type: string
          example: cuid2
          description: The unique identifier of the order
        resourceId:
          type: string
          example: cuid3
          description: The unique identifier of the resource
      required:
        - orderId
        - resourceId
    OrderResourcesDto:
      type: object
      properties:
        id:
          type: string
          example: cuid1
          description: The unique identifier of the order resource
        orderId:
          type: string
          example: cuid2
          description: The unique identifier of the order
        resourceId:
          type: string
          example: cuid3
          description: The unique identifier of the resource
      required:
        - id
        - orderId
        - resourceId
    UpdateOrderResourcesDto:
      type: object
      properties:
        orderId:
          type: string
          example: cuid2
          description: The unique identifier of the order
        resourceId:
          type: string
          example: cuid3
          description: The unique identifier of the resource
