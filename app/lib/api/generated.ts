/**
 * Generated by orval v6.30.2 üç∫
 * Do not edit manually.
 * Adrevolution
 * OpenAPI spec version: 1.0.0
 */
import { createInstance } from "./api-instance";
import type { BodyType } from "./api-instance";
export type UsersControllerFindByEmailParams = {
  email: string;
};

export type ResourcesControllerCreateDefaultResourcesForCompanyIndustry =
  (typeof ResourcesControllerCreateDefaultResourcesForCompanyIndustry)[keyof typeof ResourcesControllerCreateDefaultResourcesForCompanyIndustry];

export const ResourcesControllerCreateDefaultResourcesForCompanyIndustry = {
  Freight_Transport_Company: "Freight Transport Company",
  Passenger_Transport_Company: "Passenger Transport Company",
  Logistics_and_Supply_Chain_Company: "Logistics and Supply Chain Company",
  Courier_and_Delivery_Service: "Courier and Delivery Service",
  Moving_and_Relocation_Company: "Moving and Relocation Company",
  Maritime_Shipping_Company: "Maritime Shipping Company",
  Air_Cargo_Company: "Air Cargo Company",
  Rail_Transport_Company: "Rail Transport Company",
  Intermodal_Transport_Company: "Intermodal Transport Company",
  Public_Transport_Company: "Public Transport Company",
} as const;

export type ResourcesControllerCreateDefaultResourcesForCompanyParams = {
  industry: ResourcesControllerCreateDefaultResourcesForCompanyIndustry;
};

export type ResourcesControllerFindAllCompanyResourcesParams = {
  companyId: string;
};

export interface AssignUserToPositionDto {
  positionId: string;
  userId: string;
}

export type UpdatePositionDtoName =
  (typeof UpdatePositionDtoName)[keyof typeof UpdatePositionDtoName];

export const UpdatePositionDtoName = {
  COMPANY_OWNER: "COMPANY_OWNER",
  LIMITED_WORKER: "LIMITED_WORKER",
  WORKER: "WORKER",
  DISPATCHER: "DISPATCHER",
  MANAGER: "MANAGER",
  CUSTOM: "CUSTOM",
} as const;

export interface UpdatePositionDto {
  name: UpdatePositionDtoName;
}

export type CreatePositionDtoName =
  (typeof CreatePositionDtoName)[keyof typeof CreatePositionDtoName];

export const CreatePositionDtoName = {
  COMPANY_OWNER: "COMPANY_OWNER",
  LIMITED_WORKER: "LIMITED_WORKER",
  WORKER: "WORKER",
  DISPATCHER: "DISPATCHER",
  MANAGER: "MANAGER",
  CUSTOM: "CUSTOM",
} as const;

export interface CreatePositionDto {
  name: CreatePositionDtoName;
}

export type PositionDtoName =
  (typeof PositionDtoName)[keyof typeof PositionDtoName];

export const PositionDtoName = {
  COMPANY_OWNER: "COMPANY_OWNER",
  LIMITED_WORKER: "LIMITED_WORKER",
  WORKER: "WORKER",
  DISPATCHER: "DISPATCHER",
  MANAGER: "MANAGER",
  CUSTOM: "CUSTOM",
} as const;

export interface PositionDto {
  id: string;
  name: PositionDtoName;
}

export interface VerificationTokenDto {
  createdAt: string;
  id: string;
  token: string;
  userId: string;
}

export interface PatchUserDto {
  city?: string;
  country?: string;
  email?: string;
  firstName?: string;
  lastName?: string;
  phoneNumber?: string;
  postalCode?: string;
  province?: string;
  streetAddress?: string;
}

export type UserWithoutPasswordPositionType =
  (typeof UserWithoutPasswordPositionType)[keyof typeof UserWithoutPasswordPositionType];

export const UserWithoutPasswordPositionType = {
  COMPANY_OWNER: "COMPANY_OWNER",
  LIMITED_WORKER: "LIMITED_WORKER",
  WORKER: "WORKER",
  DISPATCHER: "DISPATCHER",
  MANAGER: "MANAGER",
  CUSTOM: "CUSTOM",
} as const;

export type UserWithoutPasswordCostUnit =
  (typeof UserWithoutPasswordCostUnit)[keyof typeof UserWithoutPasswordCostUnit];

export const UserWithoutPasswordCostUnit = {
  PER_HOUR: "PER_HOUR",
  PER_MONTH: "PER_MONTH",
} as const;

export interface UserWithoutPassword {
  city?: string;
  companyId?: string;
  costUnit?: UserWithoutPasswordCostUnit;
  country?: string;
  email: string;
  firstName: string;
  id: string;
  inviterFirstName?: string;
  inviterLastName?: string;
  isAdmin?: boolean;
  labourCost?: string;
  lastName: string;
  phoneNumber?: string;
  positionType?: UserWithoutPasswordPositionType;
  postalCode?: string;
  province?: string;
  streetAddress?: string;
  surveys?: boolean;
}

export interface UserSecretDto {
  city?: string;
  country?: string;
  email?: string;
  firstName?: string;
  hash?: string;
  id: string;
  lastLogin?: string;
  lastName?: string;
  phoneNumber?: string;
  postalCode?: string;
  province?: string;
  salt?: string;
  streetAddress?: string;
}

export interface GetSessionInfoDto {
  email: string;
  exp: number;
  iat: number;
  id: string;
}

export interface SignInBodyDto {
  email: string;
  password: string;
}

export interface SignUpBodyDto {
  email: string;
  password: string;
}

export type UpdateResourceDtoType =
  (typeof UpdateResourceDtoType)[keyof typeof UpdateResourceDtoType];

export const UpdateResourceDtoType = {
  TRUCK: "TRUCK",
  CAR: "CAR",
  BICYCLE: "BICYCLE",
  COMPUTER: "COMPUTER",
  VACUUM_MACHINE: "VACUUM_MACHINE",
  SHIP: "SHIP",
  AIRPLANE: "AIRPLANE",
  TRAIN: "TRAIN",
  VAN: "VAN",
  BUS: "BUS",
} as const;

export type UpdateResourceDtoAdditionalProperties = { [key: string]: any };

export interface UpdateResourceDto {
  additionalProperties?: UpdateResourceDtoAdditionalProperties;
  companyId?: string;
  name?: string;
  type?: UpdateResourceDtoType;
  /** @nullable */
  userId?: string | null;
}

export type CreateResourceDtoType =
  (typeof CreateResourceDtoType)[keyof typeof CreateResourceDtoType];

export const CreateResourceDtoType = {
  TRUCK: "TRUCK",
  CAR: "CAR",
  BICYCLE: "BICYCLE",
  COMPUTER: "COMPUTER",
  VACUUM_MACHINE: "VACUUM_MACHINE",
  SHIP: "SHIP",
  AIRPLANE: "AIRPLANE",
  TRAIN: "TRAIN",
  VAN: "VAN",
  BUS: "BUS",
} as const;

export type CreateResourceDtoAdditionalProperties = { [key: string]: any };

export interface CreateResourceDto {
  additionalProperties?: CreateResourceDtoAdditionalProperties;
  companyId: string;
  name: string;
  type?: CreateResourceDtoType;
  /** @nullable */
  userId?: string | null;
}

export interface UpdateUserNotificationSettingsDto {
  errorMessages: boolean;
  surveys: boolean;
}

export interface UserNotificationSettingsDto {
  errorMessages: boolean;
  id: string;
  surveys: boolean;
  userId: string;
}

export interface UserNotificationSettingsService {
  [key: string]: any;
}

export type UpdatePaymentTypeDtoCostUnit =
  (typeof UpdatePaymentTypeDtoCostUnit)[keyof typeof UpdatePaymentTypeDtoCostUnit];

export const UpdatePaymentTypeDtoCostUnit = {
  PER_HOUR: "PER_HOUR",
  PER_MONTH: "PER_MONTH",
} as const;

export interface UpdatePaymentTypeDto {
  costUnit?: UpdatePaymentTypeDtoCostUnit;
  labourCost?: string;
}

export type PaymentTypeDtoCostUnit =
  (typeof PaymentTypeDtoCostUnit)[keyof typeof PaymentTypeDtoCostUnit];

export const PaymentTypeDtoCostUnit = {
  PER_HOUR: "PER_HOUR",
  PER_MONTH: "PER_MONTH",
} as const;

export interface PaymentTypeDto {
  costUnit: PaymentTypeDtoCostUnit;
  id: string;
  labourCost?: string;
  userId: string;
}

export type CreatePaymentTypeDtoCostUnit =
  (typeof CreatePaymentTypeDtoCostUnit)[keyof typeof CreatePaymentTypeDtoCostUnit];

export const CreatePaymentTypeDtoCostUnit = {
  PER_HOUR: "PER_HOUR",
  PER_MONTH: "PER_MONTH",
} as const;

export interface CreatePaymentTypeDto {
  costUnit?: CreatePaymentTypeDtoCostUnit;
  labourCost?: string;
  userId: string;
}

export interface UpdatePermissionDto {
  isAdmin: boolean;
}

export interface PermissionDto {
  id: string;
  isAdmin: boolean;
  userPositionId: string;
}

export interface CreatePermissionDto {
  isAdmin: boolean;
  userPositionId: string;
}

export interface PatchBusinessHoursDto {
  friday?: string;
  monday?: string;
  saturday?: string;
  sunday?: string;
  thursday?: string;
  tuesday?: string;
  wednesday?: string;
}

export interface BusinessHoursDto {
  friday: string;
  monday: string;
  saturday: string;
  sunday: string;
  thursday: string;
  tuesday: string;
  wednesday: string;
}

export interface PatchCompanyDto {
  city?: string;
  country?: string;
  dateFormat?: string;
  displayBusinessHours?: boolean;
  email?: string;
  estimatedAnnualRevenue?: string;
  firstDayOfWeek?: string;
  heardAboutUs?: string;
  industry?: string;
  name?: string;
  phoneNumber?: string;
  postCode?: string;
  state?: string;
  street1?: string;
  street2?: string;
  teamSize?: string;
  timeFormat?: string;
  timezone?: string;
  topPriority?: string;
  websiteURL?: string;
}

export interface UserDto {
  city?: string;
  companyId?: string;
  country?: string;
  email?: string;
  firstName?: string;
  id: string;
  lastLogin?: string;
  lastName?: string;
  phoneNumber?: string;
  postalCode?: string;
  province?: string;
  streetAddress?: string;
}

export interface CompanyDto {
  businessHoursId?: string;
  city?: string;
  country?: string;
  dateFormat?: string;
  displayBusinessHours?: boolean;
  email?: string;
  estimatedAnnualRevenue?: string;
  firstDayOfWeek?: string;
  heardAboutUs?: string;
  id: string;
  industry?: string;
  name?: string;
  ownerId?: string;
  phoneNumber?: string;
  postCode?: string;
  state?: string;
  street1?: string;
  street2?: string;
  teamSize?: string;
  timeFormat?: string;
  timezone?: string;
  topPriority?: string;
  websiteURL?: string;
}

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary Create a new company
 */
export const companyControllerCreateCompany = (
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<CompanyDto>(
    { url: `/company`, method: "POST" },
    options
  );
};

/**
 * @summary Get company details
 */
export const companyControllerGetCompany = (
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<CompanyDto>(
    { url: `/company/details`, method: "GET" },
    options
  );
};

/**
 * @summary Get users of company by company id
 */
export const companyControllerGetUsersOfCompanyById = (
  companyId: string,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<UserDto[]>(
    { url: `/company/get-users-of-company/${companyId}`, method: "GET" },
    options
  );
};

/**
 * @summary Get users of company
 */
export const companyControllerGetUsersOfCompany = (
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<UserDto[]>(
    { url: `/company/get-users-of-company`, method: "GET" },
    options
  );
};

/**
 * @summary Update company details
 */
export const companyControllerPatchCompany = (
  patchCompanyDto: BodyType<PatchCompanyDto>,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<CompanyDto>(
    {
      url: `/company/patch-company`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: patchCompanyDto,
    },
    options
  );
};

/**
 * @summary Add user to company
 */
export const companyControllerAddUserToCompany = (
  companyId: string,
  userId: string,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<void>(
    {
      url: `/company/add-user-to-company/${companyId}/${userId}`,
      method: "PATCH",
    },
    options
  );
};

/**
 * @summary Get company by ID
 */
export const companyControllerGetCompanyById = (
  companyId: string,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<void>(
    { url: `/company/get-company-by-id/${companyId}`, method: "GET" },
    options
  );
};

/**
 * @summary Get company resources
 */
export const companyControllerGetCompanyResources = (
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<string>(
    { url: `/company/resources`, method: "GET" },
    options
  );
};

/**
 * @summary Create business hours
 */
export const businessHoursControllerCreateBusinessHours = (
  businessHoursDto: BodyType<BusinessHoursDto>,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<BusinessHoursDto>(
    {
      url: `/business-hours`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: businessHoursDto,
    },
    options
  );
};

/**
 * @summary Get business hours
 */
export const businessHoursControllerGetBusinessHours = (
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<BusinessHoursDto>(
    { url: `/business-hours`, method: "GET" },
    options
  );
};

/**
 * @summary Update business hours
 */
export const businessHoursControllerPatchBusinessHours = (
  patchBusinessHoursDto: BodyType<PatchBusinessHoursDto>,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<BusinessHoursDto>(
    {
      url: `/business-hours`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: patchBusinessHoursDto,
    },
    options
  );
};

/**
 * @summary Get business hours by user ID
 */
export const businessHoursControllerGetBusinessHoursByUserId = (
  userId: string,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<BusinessHoursDto>(
    { url: `/business-hours/${userId}`, method: "GET" },
    options
  );
};

/**
 * @summary Patch business hours by user ID
 */
export const businessHoursControllerPatchBusinessHoursById = (
  userId: string,
  patchBusinessHoursDto: BodyType<PatchBusinessHoursDto>,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<BusinessHoursDto>(
    {
      url: `/business-hours/${userId}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: patchBusinessHoursDto,
    },
    options
  );
};

export const permissionsControllerCreate = (
  createPermissionDto: BodyType<CreatePermissionDto>,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<PermissionDto>(
    {
      url: `/permissions`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createPermissionDto,
    },
    options
  );
};

export const permissionsControllerGetPermission = (
  userId: string,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<PermissionDto>(
    { url: `/permissions/${userId}`, method: "GET" },
    options
  );
};

export const permissionsControllerUpdate = (
  id: string,
  updatePermissionDto: BodyType<UpdatePermissionDto>,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<PermissionDto>(
    {
      url: `/permissions/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updatePermissionDto,
    },
    options
  );
};

export const permissionsControllerDelete = (
  id: string,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<void>(
    { url: `/permissions/${id}`, method: "DELETE" },
    options
  );
};

export const paymentTypeControllerCreate = (
  createPaymentTypeDto: BodyType<CreatePaymentTypeDto>,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<PaymentTypeDto>(
    {
      url: `/payment-type`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createPaymentTypeDto,
    },
    options
  );
};

export const paymentTypeControllerUpdate = (
  userId: string,
  updatePaymentTypeDto: BodyType<UpdatePaymentTypeDto>,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<PaymentTypeDto>(
    {
      url: `/payment-type/${userId}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updatePaymentTypeDto,
    },
    options
  );
};

export const paymentTypeControllerFindByUserId = (
  userId: string,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<PaymentTypeDto>(
    { url: `/payment-type/${userId}`, method: "GET" },
    options
  );
};

export const paymentTypeControllerDelete = (
  userId: string,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<void>(
    { url: `/payment-type/${userId}`, method: "DELETE" },
    options
  );
};

/**
 * @summary Create user notifications
 */
export const userNotificationSettingsControllerCreateUserNotificationSettings =
  (options?: SecondParameter<typeof createInstance>) => {
    return createInstance<UserNotificationSettingsService>(
      { url: `/user-notification-settings`, method: "POST" },
      options
    );
  };

/**
 * @summary Get user notifications
 */
export const userNotificationSettingsControllerGetUserNotificationSettings = (
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<UserNotificationSettingsDto>(
    { url: `/user-notification-settings`, method: "GET" },
    options
  );
};

/**
 * @summary Update user notifications
 */
export const userNotificationSettingsControllerUpdateUserNotificationSettings =
  (
    updateUserNotificationSettingsDto: BodyType<UpdateUserNotificationSettingsDto>,
    options?: SecondParameter<typeof createInstance>
  ) => {
    return createInstance<UserNotificationSettingsDto>(
      {
        url: `/user-notification-settings`,
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        data: updateUserNotificationSettingsDto,
      },
      options
    );
  };

/**
 * @summary Get notifications by user ID
 */
export const userNotificationSettingsControllerGetUserNotificationSettingsByUserId =
  (userId: string, options?: SecondParameter<typeof createInstance>) => {
    return createInstance<UserNotificationSettingsDto>(
      { url: `/user-notification-settings/user/${userId}`, method: "GET" },
      options
    );
  };

/**
 * @summary Update notifications by user ID
 */
export const userNotificationSettingsControllerUpdateUserNotificationSettingsByUserId =
  (
    userId: string,
    updateUserNotificationSettingsDto: BodyType<UpdateUserNotificationSettingsDto>,
    options?: SecondParameter<typeof createInstance>
  ) => {
    return createInstance<UserNotificationSettingsDto>(
      {
        url: `/user-notification-settings/user/${userId}`,
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        data: updateUserNotificationSettingsDto,
      },
      options
    );
  };

/**
 * @summary Create a new resource
 */
export const resourcesControllerCreateResource = (
  createResourceDto: BodyType<CreateResourceDto>,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<CreateResourceDto>(
    {
      url: `/resources`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createResourceDto,
    },
    options
  );
};

/**
 * @summary Get all resources by company id
 */
export const resourcesControllerFindAllCompanyResources = (
  params: ResourcesControllerFindAllCompanyResourcesParams,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<CreateResourceDto[]>(
    { url: `/resources`, method: "GET", params },
    options
  );
};

/**
 * @summary Get a resource by ID
 */
export const resourcesControllerFindOneResource = (
  id: string,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<CreateResourceDto>(
    { url: `/resources/${id}`, method: "GET" },
    options
  );
};

/**
 * @summary Update a resource by ID
 */
export const resourcesControllerUpdateResource = (
  id: string,
  updateResourceDto: BodyType<UpdateResourceDto>,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<CreateResourceDto>(
    {
      url: `/resources/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateResourceDto,
    },
    options
  );
};

/**
 * @summary Delete a resource by ID
 */
export const resourcesControllerRemoveResource = (
  id: string,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<void>(
    { url: `/resources/${id}`, method: "DELETE" },
    options
  );
};

/**
 * @summary Create default resources for a company
 */
export const resourcesControllerCreateDefaultResourcesForCompany = (
  companyId: string,
  params: ResourcesControllerCreateDefaultResourcesForCompanyParams,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<void>(
    { url: `/resources/default/${companyId}`, method: "POST", params },
    options
  );
};

export const authControllerSignUp = (
  signUpBodyDto: BodyType<SignUpBodyDto>,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<void>(
    {
      url: `/auth/sign-up`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signUpBodyDto,
    },
    options
  );
};

export const authControllerSignIn = (
  signInBodyDto: BodyType<SignInBodyDto>,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<void>(
    {
      url: `/auth/sign-in`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signInBodyDto,
    },
    options
  );
};

export const authControllerSignOut = (
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<void>(
    { url: `/auth/sign-out`, method: "POST" },
    options
  );
};

export const authControllerGetSessionInfo = (
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<GetSessionInfoDto>(
    { url: `/auth/session`, method: "GET" },
    options
  );
};

export const authControllerVerifyUserAndSetPassword = (
  token: string,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<void>(
    { url: `/auth/verify/${token}`, method: "PATCH" },
    options
  );
};

export const authControllerGetUserByToken = (
  token: string,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<void>(
    { url: `/auth/user/${token}`, method: "GET" },
    options
  );
};

/**
 * @summary Find user by email
 */
export const usersControllerFindByEmail = (
  params: UsersControllerFindByEmailParams,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<UserSecretDto>(
    { url: `/users/find-by-email`, method: "GET", params },
    options
  );
};

/**
 * @summary Get user details
 */
export const usersControllerGetUserDetails = (
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<UserDto>({ url: `/users`, method: "GET" }, options);
};

/**
 * @summary Update user
 */
export const usersControllerPatchUser = (
  patchUserDto: BodyType<PatchUserDto>,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<PatchUserDto>(
    {
      url: `/users`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: patchUserDto,
    },
    options
  );
};

/**
 * @summary Get user by ID
 */
export const usersControllerGetUserById = (
  userId: string,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<UserDto>(
    { url: `/users/get-user-by-id/${userId}`, method: "GET" },
    options
  );
};

/**
 * @summary Create new user without password
 */
export const usersControllerCreateUserWithoutPassword = (
  userWithoutPassword: BodyType<UserWithoutPassword>,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<void>(
    {
      url: `/users/create-new-user-without-password`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: userWithoutPassword,
    },
    options
  );
};

/**
 * @summary Find verification token
 */
export const usersControllerFindVerificationToken = (
  token: string,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<VerificationTokenDto>(
    { url: `/users/find-verification-token/${token}`, method: "GET" },
    options
  );
};

/**
 * @summary Update user password
 */
export const usersControllerUpdateUserPassword = (
  userId: string,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<void>(
    { url: `/users/update-password/${userId}`, method: "PATCH" },
    options
  );
};

export const usersControllerDeleteUser = (
  userId: string,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<void>(
    { url: `/users/${userId}`, method: "DELETE" },
    options
  );
};

/**
 * @summary Get user position
 */
export const userPositionControllerGetUserPosition = (
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<PositionDto>(
    { url: `/user-position`, method: "GET" },
    options
  );
};

export const userPositionControllerCreate = (
  createPositionDto: BodyType<CreatePositionDto>,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<PositionDto>(
    {
      url: `/user-position`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createPositionDto,
    },
    options
  );
};

export const userPositionControllerUpdate = (
  id: string,
  updatePositionDto: BodyType<UpdatePositionDto>,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<PositionDto>(
    {
      url: `/user-position/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updatePositionDto,
    },
    options
  );
};

export const userPositionControllerGetPositionByPositionId = (
  id: string,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<PositionDto>(
    { url: `/user-position/${id}`, method: "GET" },
    options
  );
};

export const userPositionControllerDelete = (
  id: string,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<void>(
    { url: `/user-position/${id}`, method: "DELETE" },
    options
  );
};

export const userPositionControllerAssignUserToPosition = (
  assignUserToPositionDto: BodyType<AssignUserToPositionDto>,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<void>(
    {
      url: `/user-position/assign`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: assignUserToPositionDto,
    },
    options
  );
};

export type CompanyControllerCreateCompanyResult = NonNullable<
  Awaited<ReturnType<typeof companyControllerCreateCompany>>
>;
export type CompanyControllerGetCompanyResult = NonNullable<
  Awaited<ReturnType<typeof companyControllerGetCompany>>
>;
export type CompanyControllerGetUsersOfCompanyByIdResult = NonNullable<
  Awaited<ReturnType<typeof companyControllerGetUsersOfCompanyById>>
>;
export type CompanyControllerGetUsersOfCompanyResult = NonNullable<
  Awaited<ReturnType<typeof companyControllerGetUsersOfCompany>>
>;
export type CompanyControllerPatchCompanyResult = NonNullable<
  Awaited<ReturnType<typeof companyControllerPatchCompany>>
>;
export type CompanyControllerAddUserToCompanyResult = NonNullable<
  Awaited<ReturnType<typeof companyControllerAddUserToCompany>>
>;
export type CompanyControllerGetCompanyByIdResult = NonNullable<
  Awaited<ReturnType<typeof companyControllerGetCompanyById>>
>;
export type CompanyControllerGetCompanyResourcesResult = NonNullable<
  Awaited<ReturnType<typeof companyControllerGetCompanyResources>>
>;
export type BusinessHoursControllerCreateBusinessHoursResult = NonNullable<
  Awaited<ReturnType<typeof businessHoursControllerCreateBusinessHours>>
>;
export type BusinessHoursControllerGetBusinessHoursResult = NonNullable<
  Awaited<ReturnType<typeof businessHoursControllerGetBusinessHours>>
>;
export type BusinessHoursControllerPatchBusinessHoursResult = NonNullable<
  Awaited<ReturnType<typeof businessHoursControllerPatchBusinessHours>>
>;
export type BusinessHoursControllerGetBusinessHoursByUserIdResult = NonNullable<
  Awaited<ReturnType<typeof businessHoursControllerGetBusinessHoursByUserId>>
>;
export type BusinessHoursControllerPatchBusinessHoursByIdResult = NonNullable<
  Awaited<ReturnType<typeof businessHoursControllerPatchBusinessHoursById>>
>;
export type PermissionsControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof permissionsControllerCreate>>
>;
export type PermissionsControllerGetPermissionResult = NonNullable<
  Awaited<ReturnType<typeof permissionsControllerGetPermission>>
>;
export type PermissionsControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof permissionsControllerUpdate>>
>;
export type PermissionsControllerDeleteResult = NonNullable<
  Awaited<ReturnType<typeof permissionsControllerDelete>>
>;
export type PaymentTypeControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof paymentTypeControllerCreate>>
>;
export type PaymentTypeControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof paymentTypeControllerUpdate>>
>;
export type PaymentTypeControllerFindByUserIdResult = NonNullable<
  Awaited<ReturnType<typeof paymentTypeControllerFindByUserId>>
>;
export type PaymentTypeControllerDeleteResult = NonNullable<
  Awaited<ReturnType<typeof paymentTypeControllerDelete>>
>;
export type UserNotificationSettingsControllerCreateUserNotificationSettingsResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof userNotificationSettingsControllerCreateUserNotificationSettings
      >
    >
  >;
export type UserNotificationSettingsControllerGetUserNotificationSettingsResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof userNotificationSettingsControllerGetUserNotificationSettings
      >
    >
  >;
export type UserNotificationSettingsControllerUpdateUserNotificationSettingsResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof userNotificationSettingsControllerUpdateUserNotificationSettings
      >
    >
  >;
export type UserNotificationSettingsControllerGetUserNotificationSettingsByUserIdResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof userNotificationSettingsControllerGetUserNotificationSettingsByUserId
      >
    >
  >;
export type UserNotificationSettingsControllerUpdateUserNotificationSettingsByUserIdResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof userNotificationSettingsControllerUpdateUserNotificationSettingsByUserId
      >
    >
  >;
export type ResourcesControllerCreateResourceResult = NonNullable<
  Awaited<ReturnType<typeof resourcesControllerCreateResource>>
>;
export type ResourcesControllerFindAllCompanyResourcesResult = NonNullable<
  Awaited<ReturnType<typeof resourcesControllerFindAllCompanyResources>>
>;
export type ResourcesControllerFindOneResourceResult = NonNullable<
  Awaited<ReturnType<typeof resourcesControllerFindOneResource>>
>;
export type ResourcesControllerUpdateResourceResult = NonNullable<
  Awaited<ReturnType<typeof resourcesControllerUpdateResource>>
>;
export type ResourcesControllerRemoveResourceResult = NonNullable<
  Awaited<ReturnType<typeof resourcesControllerRemoveResource>>
>;
export type ResourcesControllerCreateDefaultResourcesForCompanyResult =
  NonNullable<
    Awaited<
      ReturnType<typeof resourcesControllerCreateDefaultResourcesForCompany>
    >
  >;
export type AuthControllerSignUpResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignUp>>
>;
export type AuthControllerSignInResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignIn>>
>;
export type AuthControllerSignOutResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignOut>>
>;
export type AuthControllerGetSessionInfoResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGetSessionInfo>>
>;
export type AuthControllerVerifyUserAndSetPasswordResult = NonNullable<
  Awaited<ReturnType<typeof authControllerVerifyUserAndSetPassword>>
>;
export type AuthControllerGetUserByTokenResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGetUserByToken>>
>;
export type UsersControllerFindByEmailResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerFindByEmail>>
>;
export type UsersControllerGetUserDetailsResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerGetUserDetails>>
>;
export type UsersControllerPatchUserResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerPatchUser>>
>;
export type UsersControllerGetUserByIdResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerGetUserById>>
>;
export type UsersControllerCreateUserWithoutPasswordResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerCreateUserWithoutPassword>>
>;
export type UsersControllerFindVerificationTokenResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerFindVerificationToken>>
>;
export type UsersControllerUpdateUserPasswordResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerUpdateUserPassword>>
>;
export type UsersControllerDeleteUserResult = NonNullable<
  Awaited<ReturnType<typeof usersControllerDeleteUser>>
>;
export type UserPositionControllerGetUserPositionResult = NonNullable<
  Awaited<ReturnType<typeof userPositionControllerGetUserPosition>>
>;
export type UserPositionControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof userPositionControllerCreate>>
>;
export type UserPositionControllerUpdateResult = NonNullable<
  Awaited<ReturnType<typeof userPositionControllerUpdate>>
>;
export type UserPositionControllerGetPositionByPositionIdResult = NonNullable<
  Awaited<ReturnType<typeof userPositionControllerGetPositionByPositionId>>
>;
export type UserPositionControllerDeleteResult = NonNullable<
  Awaited<ReturnType<typeof userPositionControllerDelete>>
>;
export type UserPositionControllerAssignUserToPositionResult = NonNullable<
  Awaited<ReturnType<typeof userPositionControllerAssignUserToPosition>>
>;
