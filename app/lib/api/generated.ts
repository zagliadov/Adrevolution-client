/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * Transport company
 * OpenAPI spec version: 1.0.0
 */
import { createInstance } from './api-instance';
import type { BodyType } from './api-instance';
export interface PatchAccountDto {
  isBlockingEnabled: boolean;
}

export interface AccountDto {
  id: string;
  isBlockingEnabled: boolean;
  ownerId: string;
}

export interface PatchUserDto {
  city: string;
  country: string;
  firstName: string;
  lastName: string;
  phoneNumber: string;
  postalCode: string;
  province: string;
  streetAddress: string;
}

export interface UserWithoutPassword {
  city: string;
  companyId: string;
  country: string;
  email: string;
  firstName: string;
  id: string;
  lastName: string;
  phoneNumber: string;
  postalCode: string;
  province: string;
  streetAddress: string;
}

export interface UserDto {
  city: string;
  country: string;
  email: string;
  firstName: string;
  id: string;
  lastLogin: string;
  lastName: string;
  phoneNumber: string;
  postalCode: string;
  province: string;
  streetAddress: string;
}

export interface GetSessionInfoDto {
  email: string;
  exp: number;
  iat: number;
  id: string;
}

export interface SignInBodyDto {
  email: string;
  password: string;
}

export interface SignUpBodyDto {
  email: string;
  password: string;
}

export interface UpdateCommunicationDto { [key: string]: any }

export interface CommunicationDto { [key: string]: any }

export interface LabourCostDto { [key: string]: any }

export interface UpdateLabourCostDto { [key: string]: any }

export interface PermissionDto {
  isAdmin: boolean;
  isOwner: boolean;
  level: string;
}

export interface BusinessHoursDto {
  friday: string;
  monday: string;
  saturday: string;
  sunday: string;
  thursday: string;
  tuesday: string;
  wednesday: string;
}

export interface CompanyDetailsDto {
  displayBusinessHours?: boolean;
  estimatedAnnualRevenue?: string;
  heardAboutUs?: string;
  industry?: string;
  teamSize?: string;
  topPriority?: string;
}

export interface CompanyDto {
  businessHoursId?: string;
  city?: string;
  companyEmail?: string;
  companyName?: string;
  country: string;
  dateFormat: string;
  firstDayOfWeek: string;
  id: string;
  ownerId?: string;
  phoneNumber?: string;
  postCode?: string;
  state?: string;
  street1?: string;
  timeFormat: string;
  timezone: string;
  websiteURL?: string;
}

export interface HelloWorldDto {
  message: string;
}




type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


  export const appControllerGetHello = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<HelloWorldDto>(
      {url: `/`, method: 'GET'
    },
      options);
    }
  
export const companyControllerGetCompany = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<CompanyDto>(
      {url: `/company`, method: 'GET'
    },
      options);
    }
  
export const companyControllerPatchCompany = (
    companyDto: BodyType<CompanyDto>,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<CompanyDto>(
      {url: `/company`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: companyDto
    },
      options);
    }
  
export const companyControllerGetUsersOfCompany = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<CompanyDto>(
      {url: `/company/get-users-of-company`, method: 'GET'
    },
      options);
    }
  
export const companyDetailsControllerGetCompanyDetails = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<CompanyDetailsDto>(
      {url: `/company-details`, method: 'GET'
    },
      options);
    }
  
export const companyDetailsControllerPatchCompanyDetails = (
    companyDetailsDto: BodyType<CompanyDetailsDto>,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<CompanyDetailsDto>(
      {url: `/company-details`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: companyDetailsDto
    },
      options);
    }
  
export const businessHoursControllerGetBusinessHours = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<BusinessHoursDto>(
      {url: `/business-hours`, method: 'GET'
    },
      options);
    }
  
export const businessHoursControllerPatchBusinessHours = (
    businessHoursDto: BodyType<BusinessHoursDto>,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<BusinessHoursDto>(
      {url: `/business-hours`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: businessHoursDto
    },
      options);
    }
  
export const permissionsControllerGetPermission = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<PermissionDto>(
      {url: `/permissions`, method: 'GET'
    },
      options);
    }
  
export const labourCostControllerUpdate = (
    userId: string,
    updateLabourCostDto: BodyType<UpdateLabourCostDto>,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<void>(
      {url: `/labour-cost/${userId}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateLabourCostDto
    },
      options);
    }
  
export const labourCostControllerFindByUserId = (
    userId: string,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<LabourCostDto>(
      {url: `/labour-cost/${userId}`, method: 'GET'
    },
      options);
    }
  
export const labourCostControllerDelete = (
    userId: string,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<void>(
      {url: `/labour-cost/${userId}`, method: 'DELETE'
    },
      options);
    }
  
export const communicationsControllerGetCommunications = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<CommunicationDto>(
      {url: `/communications`, method: 'GET'
    },
      options);
    }
  
export const communicationsControllerUpdateCommunications = (
    updateCommunicationDto: BodyType<UpdateCommunicationDto>,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<CommunicationDto>(
      {url: `/communications`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateCommunicationDto
    },
      options);
    }
  
export const authControllerSignUp = (
    signUpBodyDto: BodyType<SignUpBodyDto>,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<void>(
      {url: `/auth/sign-up`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: signUpBodyDto
    },
      options);
    }
  
export const authControllerSignIn = (
    signInBodyDto: BodyType<SignInBodyDto>,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<void>(
      {url: `/auth/sign-in`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: signInBodyDto
    },
      options);
    }
  
export const authControllerSignOut = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<void>(
      {url: `/auth/sign-out`, method: 'POST'
    },
      options);
    }
  
export const authControllerGetSessionInfo = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<GetSessionInfoDto>(
      {url: `/auth/session`, method: 'GET'
    },
      options);
    }
  
export const usersControllerGetUserDetails = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<UserDto>(
      {url: `/users`, method: 'GET'
    },
      options);
    }
  
export const usersControllerPatchUser = (
    patchUserDto: BodyType<PatchUserDto>,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<PatchUserDto>(
      {url: `/users`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchUserDto
    },
      options);
    }
  
export const usersControllerGetUserById = (
    userId: string,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<UserDto>(
      {url: `/users/get-user-by-id/${userId}`, method: 'GET'
    },
      options);
    }
  
export const usersControllerCreateUserWithoutPassword = (
    userWithoutPassword: BodyType<UserWithoutPassword>,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<void>(
      {url: `/users/create-new-user-without-password`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userWithoutPassword
    },
      options);
    }
  
export const accountControllerGetAccount = (
    
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<AccountDto>(
      {url: `/account`, method: 'GET'
    },
      options);
    }
  
export const accountControllerPatchAccount = (
    patchAccountDto: BodyType<PatchAccountDto>,
 options?: SecondParameter<typeof createInstance>,) => {
      return createInstance<AccountDto>(
      {url: `/account`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchAccountDto
    },
      options);
    }
  
export type AppControllerGetHelloResult = NonNullable<Awaited<ReturnType<typeof appControllerGetHello>>>
export type CompanyControllerGetCompanyResult = NonNullable<Awaited<ReturnType<typeof companyControllerGetCompany>>>
export type CompanyControllerPatchCompanyResult = NonNullable<Awaited<ReturnType<typeof companyControllerPatchCompany>>>
export type CompanyControllerGetUsersOfCompanyResult = NonNullable<Awaited<ReturnType<typeof companyControllerGetUsersOfCompany>>>
export type CompanyDetailsControllerGetCompanyDetailsResult = NonNullable<Awaited<ReturnType<typeof companyDetailsControllerGetCompanyDetails>>>
export type CompanyDetailsControllerPatchCompanyDetailsResult = NonNullable<Awaited<ReturnType<typeof companyDetailsControllerPatchCompanyDetails>>>
export type BusinessHoursControllerGetBusinessHoursResult = NonNullable<Awaited<ReturnType<typeof businessHoursControllerGetBusinessHours>>>
export type BusinessHoursControllerPatchBusinessHoursResult = NonNullable<Awaited<ReturnType<typeof businessHoursControllerPatchBusinessHours>>>
export type PermissionsControllerGetPermissionResult = NonNullable<Awaited<ReturnType<typeof permissionsControllerGetPermission>>>
export type LabourCostControllerUpdateResult = NonNullable<Awaited<ReturnType<typeof labourCostControllerUpdate>>>
export type LabourCostControllerFindByUserIdResult = NonNullable<Awaited<ReturnType<typeof labourCostControllerFindByUserId>>>
export type LabourCostControllerDeleteResult = NonNullable<Awaited<ReturnType<typeof labourCostControllerDelete>>>
export type CommunicationsControllerGetCommunicationsResult = NonNullable<Awaited<ReturnType<typeof communicationsControllerGetCommunications>>>
export type CommunicationsControllerUpdateCommunicationsResult = NonNullable<Awaited<ReturnType<typeof communicationsControllerUpdateCommunications>>>
export type AuthControllerSignUpResult = NonNullable<Awaited<ReturnType<typeof authControllerSignUp>>>
export type AuthControllerSignInResult = NonNullable<Awaited<ReturnType<typeof authControllerSignIn>>>
export type AuthControllerSignOutResult = NonNullable<Awaited<ReturnType<typeof authControllerSignOut>>>
export type AuthControllerGetSessionInfoResult = NonNullable<Awaited<ReturnType<typeof authControllerGetSessionInfo>>>
export type UsersControllerGetUserDetailsResult = NonNullable<Awaited<ReturnType<typeof usersControllerGetUserDetails>>>
export type UsersControllerPatchUserResult = NonNullable<Awaited<ReturnType<typeof usersControllerPatchUser>>>
export type UsersControllerGetUserByIdResult = NonNullable<Awaited<ReturnType<typeof usersControllerGetUserById>>>
export type UsersControllerCreateUserWithoutPasswordResult = NonNullable<Awaited<ReturnType<typeof usersControllerCreateUserWithoutPassword>>>
export type AccountControllerGetAccountResult = NonNullable<Awaited<ReturnType<typeof accountControllerGetAccount>>>
export type AccountControllerPatchAccountResult = NonNullable<Awaited<ReturnType<typeof accountControllerPatchAccount>>>
